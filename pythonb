import numpy as np
import cv2 as cv
import board
from smbus2 import SMBus
from threading import Thread
from cv2 import aruco
import math
import time

mtx1 = [567.72602969, 0, 313.44143064]
mtx2 = [0, 567.16356923, 233.64730096]
mtx3 = [0, 0, 1]
mtx = np.array([mtx1, mtx2, mtx3])
dist = np.array([0.26660512, -0.86434186, -0.00534246, 0.01027815, 1.58472904])
marker_size = 100

# I2C setup
i2c = SMBus(1)
# i4c = board.I2C() # Uncomment if you need to use the i4c connection

def send_message(message):
    message = [ord(character) for character in message]
    i2c.write_i2c_block_data(8, 0, message)

# Function to calculate the angle to the ArUco marker
def calculate_angle(marker_center, image_center, distance):
    vector_to_marker = marker_center - image_center
    angle = np.arctan2(vector_to_marker, distance) * (180 / np.pi)
    return angle

# Function to detect ArUco marker and calculate the angle
def detect_aruco_marker(frame):
    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_6X6_50)
    parameters = cv.aruco.DetectorParameters()
    corners, ids, _ = cv.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

    if ids is not None:
        rvec, tvec, _ = aruco.estimatePoseSingleMarkers(corners, marker_size, mtx, dist)
        frame_undistorted = cv.undistort(frame, mtx, dist, None, mtx)
        centerx = frame_undistorted.shape[1] // 2
        xsum = sum([corner[0] for corner in corners[0][0]])
        markercenterx = xsum / 4
        distance = tvec[0][0][2]
        angle = calculate_angle(markercenterx, centerx, distance)
        return angle
    return None

# Start capturing video
cap = cv.VideoCapture(0)

while True:
    ret, frame = cap.read()
    Angle = detect_aruco_marker(frame)

    if Angle is not None:
        calibrated_angle = Angle + 0.141897
        send_message(str(calibrated_angle))
        # LCD_funct("On my way!") # Uncomment if you have the LCD functionality
        break
    else:
        send_message("No marker detected")  # You can comment this out if you don't need to send a message when no marker is detected.

    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv.destroyAllWindows()

# Threading example - Uncomment and modify if needed for your use case
# x = Thread(target=detect_aruco_marker, args=(frame,), daemon=True)
# y = Thread(target=send_message, args=("Your message here",), daemon=True)
# x.start()
# y.start()
