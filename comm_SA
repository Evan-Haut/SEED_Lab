import numpy as np
import cv2 as cv
from smbus2 import SMBus
from threading import Thread

# Constants for camera calibration
mtx = np.array([[567.72602969, 0, 313.44143064], 
                [0, 567.16356923, 233.64730096], 
                [0, 0, 1]])
dist = np.array([0.26660512, -0.86434186, -0.00534246, 0.01027815, 1.58472904])
marker_size = 0.1  # Size in meters

# I2C setup
i2c = SMBus(1)
arduino_address = 8

# Function to send array of data to Arduino
def send_i2c_data(data_array):
    message_bytes = [int(x) if isinstance(x, int) else ord(x) for x in data_array]
    i2c.write_i2c_block_data(arduino_address, 0, message_bytes)
    print("Data sent to Arduino:", data_array)

# Function to calculate the angle
def calculate_angle(marker_center, image_center, distance):
    vector_to_marker = marker_center - image_center
    angle = np.arctan2(vector_to_marker, distance) * (180 / np.pi)
    return float(angle)

# State machine for ArUco detection
def aruco_detection_state_machine():
    cap = cv.VideoCapture(0)
    if not cap.isOpened():
        print("Error: Camera could not be opened.")
        return

    state = "detecting_marker"
    send_array = []

    try:
        while True:
            ret, frame = cap.read()
            if not ret:
                print("Error: Can't receive frame (stream end?). Exiting ...")
                break

            gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
            aruco_dict = cv.aruco.getPredefinedDictionary(cv.aruco.DICT_6X6_50)
            parameters = cv.aruco.DetectorParameters()
            corners, ids, rejectedImgPoints = cv.aruco.detectMarkers(gray, aruco_dict, parameters)

            if state == "detecting_marker":
                if ids is not None:
                    send_array.append(1)  # Detection flag
                    print("Marker detected, moving to calculating angle state.")
                    state = "calculating_angle"
            
            elif state == "calculating_angle":
                rvec, tvec, _ = cv.aruco.estimatePoseSingleMarkers(corners, marker_size, mtx, dist)
                if tvec is not None and len(tvec) > 0:
                    xsum = np.sum(corners[0][0][:, 0])
                    marker_center_x = xsum / 4
                    center_x = frame.shape[1] // 2
                    angle = calculate_angle(marker_center_x, center_x, tvec[0][0][2])
                    send_array.append(angle)
                    print(f"Angle calculated: {angle}, moving to turn off state.")
                    state = "turning_off"
            
            elif state == "turning_off":
                print("Turning off camera and sending data.")
                break

            cv.imshow("Frame", frame)
            if cv.waitKey(1) & 0xFF == ord('q'):
                print("Quitting...")
                break
    finally:
        cap.release()
        cv.destroyAllWindows()
        send_i2c_data(send_array)

# Run the state machine in a separate thread
thread = Thread(target=aruco_detection_state_machine, daemon=True)
thread.start()
thread.join()
