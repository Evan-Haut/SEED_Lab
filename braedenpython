import numpy as np
import cv2 as cv

# Constants for camera calibration and ArUco detection
mtx = np.array([[567.72602969, 0, 313.44143064],
                [0, 567.16356923, 233.64730096],
                [0, 0, 1]])
dist = np.array([0.26660512, -0.86434186, -0.00534246, 0.01027815, 1.58472904])
marker_size = 0.1  # Actual marker size in meters

# Initialize camera
cap = cv.VideoCapture(0)

# Check if the camera opened successfully
if not cap.isOpened():
    print("Error: Camera could not be opened.")
else:
    # Define ArUco dictionary and parameters
    aruco_dict = cv.aruco.getPredefinedDictionary(cv.aruco.DICT_6X6_50)
    parameters = cv.aruco.DetectorParameters_create()

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Error: Can't receive frame (stream end?). Exiting ...")
            break

        gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
        corners, ids, rejectedImgPoints = cv.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)
        
        if ids is not None:
            frame = cv.aruco.drawDetectedMarkers(frame, corners, ids)
            rvec, tvec, _ = cv.aruco.estimatePoseSingleMarkers(corners, marker_size, mtx, dist)
            for i in range(len(ids)):
                cv.aruco.drawAxis(frame, mtx, dist, rvec[i], tvec[i], 0.1)

        cv.imshow("Detected ArUco Marker", frame)

        if cv.waitKey(1) & 0xFF == ord('q'):
            print("Quitting...")
            break

    cap.release()
    cv.destroyAllWindows()
