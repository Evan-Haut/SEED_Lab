#define ENCODER_OPTIMIZE_INTERRUPTS
#include <Encoder.h>

// Initialize desired position
int desired_position[2] = {0, 0}; 

// Gain, battery voltage
float Kp = 2.0;
float batteryVoltage = 7.8;

// Error and PWM both wheels 
float error[2]; 
unsigned int PWM[2]; 

//Constant
const float pi = 3.141592653589793238462643383279502884197;

//Encoder left and right assignment 
Encoder motor1(3, 6); 
Encoder motor2(2, 5); 

// Initialize encoder counts
long encoder_count[2]; 

// Enable pin declaration
const int enablePin = 4;

// Voltage sign pins 
const int vsignPin7 = 7;
const int vsignPin8 = 8; 

// Motor voltage pins 
const int motorPin[2] = {9, 10}; 

// Time variables
unsigned long desired_Ts_ms = 10; 
unsigned long last_time_ms;
unsigned long start_time;
float current_time;

// Motor velocity variables
float motorVelocity[2] = {0.0, 0.0}; 

// Motor voltage variables
float motorVoltage[2] = {0.0, 0.0}; 

// Previous count variables
long pos_counts_prev[2]; 

// Initialize previous radian variables
float pos_previous_rad[2]; 

// Initialize quadrant and wheels 
int quadrant;
int left_wheel;
int right_wheel;

// PI controller parameters, position control 
float Kp_pos = 9.764; 
float Ki_pos = 0.1; 
float Kd_pos = 0.01; 
float integral_error[2] = {0.0, 0.0}; 
float prev_error[2] = {0.0, 0.0}; 

void setup() {
  // Baud rate 
  Serial.begin(115200);

  pinMode(vsignPin7, OUTPUT);
  //digitalWrite(vsignPin[0], LOW);
  pinMode(vsignPin8, OUTPUT);
  //digitalWrite(vsignPin[1], LOW);
  pinMode(motorPin[0], OUTPUT);
  digitalWrite(motorPin[0], LOW); 
  pinMode(motorPin[1], OUTPUT);
  digitalWrite(motorPin[1], LOW); 

  // Enable pin as pin 4, high
  pinMode(enablePin, OUTPUT);
  digitalWrite(enablePin, HIGH);

  // Previous counts and previous radians
  pos_counts_prev[0] = motor1.read();
  pos_previous_rad[0] = 2 * pi * static_cast<float>(pos_counts_prev[0]) / 3200;
  pos_counts_prev[1] = motor2.read();
  pos_previous_rad[1] = 2 * pi * static_cast<float>(pos_counts_prev[1]) / 3200;

  // Set up last time in milliseconds
  last_time_ms = millis();
}

void loop() {
  // quadrant input
  quadrant = 3;

  // Variables for position calculations 
  long pos_counts[2];
  float pos_rad[2];
  float position_error[2];
  float desired_speed[2];
  start_time = millis();

  current_time = (float)((last_time_ms - start_time) / 1000);
  float time_ellapsed = (float)((millis() - last_time_ms) / 1000.0);

  // Position from counts using ISR
  pos_counts[0] = motor1.read();

  // Wrap around when the wheel spins over one revolution
  if (pos_counts[0] >= 3200) {
    pos_counts[0] = pos_counts[0] - 3200;
  } else if (pos_counts[0] <= -3200) {
    pos_counts[0] = pos_counts[0] + 3200;
  }

  pos_rad[0] = 2 * pi * static_cast<float>(pos_counts[0]) / 3200;

  // Velocity calculation, Motor 1
  motorVelocity[0] = (pos_rad[0] - pos_previous_rad[0]) / time_ellapsed;

  // Position from counts using ISR
  pos_counts[1] = motor2.read();

  // Wrap around when the wheel spins over one revolution
  if (pos_counts[1] >= 3200) {
    pos_counts[1] = pos_counts[1] - 3200;
  } else if (pos_counts[1] <= -3200) {
    pos_counts[1] = pos_counts[1] + 3200;
  }

  pos_rad[1] = 2 * pi * static_cast<float>(pos_counts[1]) / 3200;

  // Velocity calculation, Motor 2
  motorVelocity[1] = (pos_rad[1] - pos_previous_rad[1]) / time_ellapsed;

  // Previous positions = current positions for the next iteration
  for (int i = 0; i < 2; i++) {
    pos_counts_prev[i] = pos_counts[i];
    pos_previous_rad[i] = pos_rad[i];
  }

  // if else statements for quadrants
  if (quadrant == 1) {
    left_wheel = 0;
    right_wheel = 0;
  } else if (quadrant == 2) {
    left_wheel = 0;
    right_wheel = 1;
  } else if (quadrant == 3) {
    left_wheel = 1;
    right_wheel = 1;
  } else if (quadrant == 4) {
    left_wheel = 1;
    right_wheel = 0;
  } 

  // Desired position based on wheel inputs
  if (left_wheel == 1) {
    desired_position[0] = pi;
  } else if (left_wheel == 0) {
    desired_position[0] = 0;
  }

  if (right_wheel == 1) {
    desired_position[1] = pi;
  } else if (right_wheel == 0) {
    desired_position[1] = 0;
  }

  // Position error, integral error, derivative error, and desired speed calculations
  for (int i = 0; i < 2; i++) {
    position_error[i] = desired_position[i] - pos_rad[i];
    integral_error[i] = integral_error[i] + position_error[i] * ((float)desired_Ts_ms / 1000);
    float derivative_error = (position_error[i] - prev_error[i]) / ((float)desired_Ts_ms / 1000);
    prev_error[i] = position_error[i];

    desired_speed[i] = (Kp_pos * position_error[i]) + (Ki_pos * integral_error[i]) + (Kd_pos * derivative_error);
    error[i] = desired_speed[i] - motorVelocity[i];
    //motorVoltage[i] = (Kp * error[i]);

      if (i == 0) {
        motorVoltage[0] = (-Kp * error[0]);
      } else {
        motorVoltage[1] = (-Kp * error[1]);
  }

    // determine direction of motor voltages
  /*  if (motorVoltage[0] >= 0) {
      digitalWrite(vsignPin7, HIGH);
    } else {
      digitalWrite(vsignPin7, LOW);
    }
/*
    if (motorVoltage[1] >= 0) {
      digitalWrite(vsignPin[1], LOW);
    } else {
      digitalWrite(vsignPin[1], HIGH);
    }
*/
    // Calculate PWM
    PWM[i] = 255 * abs(motorVoltage[i] / batteryVoltage);

    // Analog write the PWM to the motors
    analogWrite(motorPin[i], min(PWM[i], 255));
  }

//PWM[1] = 255 * abs(motorVoltage[1] / batteryVoltage);
//PWM[2] = 255 * abs(motorVoltage[2] / batteryVoltage);

  // Update time variable
  last_time_ms = millis();
  if (millis() < last_time_ms + desired_Ts_ms) {
    // Print statements for time, position, position error, and voltage
    // Help with debugging
 Serial.print("\n");
 Serial.print("time ");
 Serial.print(current_time); 

 Serial.print("\t"); 
 Serial.print("pos_rad1 ");
  Serial.print((double)pos_rad[0]); 
 Serial.print("\t"); 
 
Serial.print("pos_error1 ");
 Serial.print((double)position_error[0]);
  Serial.print("\t"); 

Serial.print("voltage1 ");
 Serial.print((double)motorVoltage[0]);
Serial.print("\t"); 
Serial.print("\t"); 
Serial.print("pos_rad 2 ");
  Serial.print((double)pos_rad[1]); 
 Serial.print("\t"); 
 
Serial.print("pos_error2 ");
 Serial.print((double)position_error[1]);
  Serial.print("\t"); 

Serial.print("voltage2 ");
 Serial.print((double)motorVoltage[1]);
  }

  // Delay
  while (millis() < last_time_ms + desired_Ts_ms) {
    
 }
} 
