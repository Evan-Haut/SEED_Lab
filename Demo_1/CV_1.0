import numpy as np
import cv2 as cv
import glob
from cv2 import aruco
 
# termination criteria
criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
 
# prepare object points, like (0,0,0), (1,0,0), (2,0,0) ....,(6,5,0)
objp = np.zeros((10*7,3), np.float32)
objp[:,:2] = np.mgrid[0:10,0:7].T.reshape(-1,2)
 
# Arrays to store object points and image points from all the images.
objpoints = [] # 3d point in real world space
imgpoints = [] # 2d points in image plane.
 
images = glob.glob('/home/seedlab/Pictures/*.jpg')
 
for fname in images:
    img = cv.imread(fname)
    gray = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
    print("hello")
    # Find the chess board corners
    ret, corners = cv.findChessboardCorners(gray, (10,7), None)
 
    # If found, add object points, image points (after refining them)
    if ret == True:
        print("HI")
        objpoints.append(objp)
 
        corners2 = cv.cornerSubPix(gray,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners2)
 
        # Draw and display the corners
        cv.drawChessboardCorners(img, (10,7), corners2, ret)
        cv.imshow('img', img)
        cv.waitKey(500)
ret, mtx, dist, rvecs, tvecs = cv.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

def calculate_angle(marker_center, image_center):
    # Calculate the vector between the marker center and the image center
    vector_to_marker = marker_center - image_center
    
    # Calculate the angle using the arctangent function
    angle = np.arctan2(vector_to_marker[1], vector_to_marker[0])
    
    # Convert the angle from radians to degrees
    angle_degrees = np.degrees(angle)
    
    return angle_degrees

# Function to detect ArUco marker and draw the axis
def detect_aruco_marker(frame):
    # Convert the frame to grayscale
    gray = cv.cvtColor(frame, cv.COLOR_BGR2GRAY)
    
    # Load the ArUco dictionary and parameters
    aruco_dict = aruco.getPredefinedDictionary(aruco.DICT_6X6_50)
    parameters = cv.aruco.DetectorParameters()
    
    # Detect markers in the frame
    corners, ids, _ = cv.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)
    
    # If markers are found, draw the axis and calculate the angle
    if ids is not None:
        for i in range(len(ids)):
            
            # Calculate the marker center
            marker_center = np.mean(corners[i][0], axis=0)
            
            # Calculate the angle
            angle = calculate_angle(marker_center, np.array([frame.shape[1] / 2, frame.shape[0] / 2]))
            angle = angle - 90
            # Print the angle
            print(f"Angle with marker {ids[i][0]}: {angle} degrees")
    
    # Display the frame with the axis
    cv.imshow("Detected ArUco Marker", frame)


cap = cv.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Process the frame
    detect_aruco_marker(frame)

    # Break the loop if 'q' is pressed
    if cv.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv.destroyAllWindows()
cv.destroyAllWindows()
