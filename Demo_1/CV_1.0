import cv2
import numpy as np

def calculate_angle(marker_center, image_center):
    # Calculate the vector between the marker center and the image center
    vector_to_marker = marker_center - image_center
    
    # Calculate the angle using the arctangent function
    angle = np.arctan2(vector_to_marker[1], vector_to_marker[0])
    
    # Convert the angle from radians to degrees
    angle_degrees = np.degrees(angle)
    
    return angle_degrees

# Function to detect ArUco marker and draw the axis
def detect_aruco_marker(frame):
    # Convert the frame to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    # Load the ArUco dictionary and parameters
    aruco_dict = cv2.aruco.Dictionary_get(cv2.aruco.DICT_6X6_250)
    parameters = cv2.aruco.DetectorParameters_create()
    
    # Detect markers in the frame
    corners, ids, _ = cv2.aruco.detectMarkers(gray, aruco_dict, parameters=parameters)
    
    # If markers are found, draw the axis and calculate the angle
    if ids is not None:
        for i in range(len(ids)):
            # Draw the axis on the frame
            cv2.aruco.drawAxis(frame, camera_matrix, dist_coeff, corners[i], 1.0)
            
            # Calculate the marker center
            marker_center = np.mean(corners[i][0], axis=0)
            
            # Calculate the angle
            angle = calculate_angle(marker_center, np.array([frame.shape[1] / 2, frame.shape[0] / 2]))
            
            # Print the angle
            print(f"Angle with marker {ids[i][0]}: {angle} degrees")
    
    # Display the frame with the axis
    cv2.imshow("Detected ArUco Marker", frame)

# Replace 'your_camera_index' with the actual camera index (usually 0 for the default camera)
cap = cv2.VideoCapture(0)

while True:
    # Capture frame-by-frame
    ret, frame = cap.read()

    # Process the frame
    detect_aruco_marker(frame)

    # Break the loop if 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close all windows
cap.release()
cv2.destroyAllWindows()
